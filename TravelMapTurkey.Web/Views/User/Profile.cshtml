@using Newtonsoft.Json
@model UserProfileViewModel

@{
    ViewData["Title"] = $"{Model.FirstName} {Model.LastName}";
    ViewBag.UserData = Model;
}

<div id="welcome_text">Ziyaret ettiğiniz illeri aşağıdan işaretleyebilirsiniz</div>
<br />
<div class="d-flex flex-row justify-content-between" style="width:450px;">
    <div class="d-flex align-items-center justify-content-center">
        <span style="display:block; width:15px; height:15px; border-radius:100%; background-color:#47c511"></span>
        <p style="margin-left: 6px; height:15px; margin-top:4px;">Ziyaret Edilen Şehirler</p>
    </div>
    <div class="d-flex align-items-center justify-content-center">
        <span style="display:block; width:15px; height:15px; border-radius:100%; background-color:#fff04d"></span>
        <p style="margin-left: 6px; height:15px; margin-top:4px;">İstek Listesinde Olan Şehirler</p>
    </div>
</div>

<div id="map_container">

</div>
@if (Model.IsOwnProfile)
{
    <button id="download_button" onclick="downloadMap()">Haritayı İndir</button>
}

<div id="city_count_text">Seçili il sayısı:&nbsp;<span id="city_count">0</span>/81</div>

<!-- Modal Tetikleyici -->
@if (Model.IsOwnProfile)
{
    <button type="button" class="btn btn-primary" id="openModalBtn" data-toggle="modal" data-target="#exampleModal" style="display: none;">Open modal</button>
    @await Component.InvokeAsync("CityAdd")
} else
{
    <button type="button" class="btn btn-primary" id="openModalBtn" data-toggle="modal" data-target="#exampleModal" style="display: none;">Open modal</button>
    @await Component.InvokeAsync("CityReview")
}

<script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
<script language="JavaScript" type="text/javascript" src="/js/jquery-1.2.6.min.js"></script>
<script language="JavaScript" type="text/javascript" src="/js/jquery-ui-personalized-1.5.2.packed.js"></script>
<script language="JavaScript" type="text/javascript" src="/js/sprinkle.js"></script>

<script>

    const model = @Html.Raw(JsonConvert.SerializeObject(Model.Cities, Formatting.Indented, new JsonSerializerSettings()
           {
               ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore
           }));

    const modelProfileInfoBool = @Html.Raw(Json.Serialize(Model.IsOwnProfile)) 
    
    console.log("model data", model)

    localStorage.clear()
    var storage = JSON.parse(localStorage.getItem('cities')) || []
    model.forEach((city) => {

        const cityObj = {
            cityName: city.CityName,
            review: city.CityReview,
            type: city.Type
        }
        storage.push(cityObj);
    })

    localStorage.setItem('cities', JSON.stringify(storage))
    localStorage.setItem('ownProfile', JSON.stringify(modelProfileInfoBool))
</script>




